1) create index.html, README.md, server.js
2) npm init
3) write "console.log("test");" in server.js file
4) run "node server.js" in the terminal and make sure "test" is printed

package.json: general information about the package
package-lock.json: exactly the version of the packages/dependencies for this node app
	** DO NOT touch this



** create react app:
npm init react-app my_app
cd my_app
npm start
(if you get an openssl error, write : export NODE OPTIONS=--openssl-legacy-provider
	-> another solution, put this in the json:
		terminal.integrated.env.windows": {
      			"NODE_OPTIONS": "--openssl-legacy-provider"
		}

** create next.js app:
npx create-next-app my_app --use-npm
1. typescript? no (we'll use javascript)
2. eslint? yes
3. tailwind css? no
4. src/ directory? no
5. app router? yes
6. import alias? no
cd my_app
npm run dev OR npm start




LEC5
=====
react forms: ex. to avoid doing form validations for EVERY FIELD
1. npm install react-hook-form
2. import {useForm} from "react-hook-form"
3. const {register, handleSubmit} = useForm();



LEC7
=====
It's difficult to configure your angular app, so don't do it manually!
Instead, use the angular CLI (Command-Line Interface):
	npm install -g @angular/cli
		-> this is not creating an angular "app"! It's just installing the CLI which will help us to create the angular app, to run it, etc.

Now, create a new angular app:
	ng new my_app
		add angular routing? n (no for now, because we're not going to work with routing today)
		stylsheet format? css

	* You can use the following command to generate a project that has app.module.ts and app-routing.module.ts (old version):
		ng new my-app --no-standalone --routing --ssr=false

to run:
	cd my_app
	ng serve

npm install bootstrap
and instead of importing it inside every file, go to angular.json -> under architect -> build -> add "./node_modules/bootstrap/dist/css/bootstrap.min.css" inside "styles" -> and "./node_modules/bootstrap/dist/js/bootstrap.bundle.js" inside "scripts"

to add another component, open another bash terminal and type:
	cd my_app
	ng generate component components/header
which will create a "header" component under the "components" folder

to use this newly created component, go to app.component.html and add <app-header/>
	where app-header comes from "selector" in header.component.ts





LEC8
====
Example1: When the "Click Me" Button that resides within BUTTON component is clicked, update the text in the PARAGRAPH component
	1. create a button component with "ng generate component components/button"
		1.1 write the HTML for button in the html
		1.2 write (click)="onClikk()" where onClikk() can be of any name I want
		1.3 inside the ts file, write the onClikk() function:
			onClickk() {
			    console.log("button clicked!");
			}
	2. create a paragraph component with "ng generate component components/paragraph"
		2.1 inside the HTML, we'll have <p>{{textt}}</p>
		2.2 inside the ts, write @Input() textt: string = "Default Text";
			and make sure to import "Input" as well at the top:
				import { Component, Input } from '@angular/core';
	3. at this moment, the button component and the paragraph component will keep whatever happens to only themselves and they have no interactions/connections with each other
	4. import Output and EventEmitter in the button ts:
		import { Component, Output, EventEmitter } from '@angular/core';
			This Output will "shout out" (or "emit") when something happened to that component
		4.1 make sure to also add:
			@Output() textChangedd = new EventEmitter();
				inside the export class block
		4.2 also update onClikk function:
			onClickk() {
			    console.log("button clicked!");
			    this.textChangedd.emit(); //shout-out!!!
			}
		4.3 inside the PARAGRAPH ts, add:
			updateTextt() {
   			   this.textt = "Text is updated!";
			}
	5. They are ready to interact with each other now, but they are still not interacting. We can only make the interaction happen inside the app component where BOTH of them are being called (ie. where they can "see" each other)
	6. Inside app.html, update the code:
		<h1>Hello World</h1>
		<div class="container text-center my-3">
		  <app-paragraph/>
		  <app-button (textChangedd)="updateTextt()"/>
		</div>
	such that upon textChangedd event, we will call updateTextt() function.
		6.2 The problem is, button component knows nothign about updateTextt() function, because that function resides within the paragraph component
		6.3 to work around this, "tag" the component:
			<app-paragraph #para/>
		6.4 and we're now going to use the tag to tell where to find updateTextt() function:
			<app-button (textChangedd)="para.updateTextt()"/>

Example2: Implement a counter program that increments everytime a button is clicked
Example3: whenever a button is clicked, populate a list
Example4: change the style when a button is clicked




lec10
=====
to keep all data-related works separate, we create a service:
	ng generate service services/data

singleton: creates only one instance of that element at the application level and everything will end up using that one instance - will not create a different one everytime it is used
	-> Dependency Injection

example 2:
	1. create a user service with 	ng generate service services/user
	2. we will be using https://jsonplaceholder.typicode.com/posts/1
	3. we need some initial setups to fetch data from external api
		3.1 you need to put the below line inside app.module.ts:
 			import { HttpClientModule } from '@angular/common/http';
		and also add the below inside "imports" array, also in app.module.ts:
			HttpClientModule
	4. inside user.service.ts, include:
		import { HttpClient } from "@angular/common/http";
	5. now the HttpClient can be accessed:
		constructor(private http: HttpClient) { }
	6. 
		getPost() {
   			this.http.get('https://jsonplaceholder.typicode.com/posts/1');
		}
	7. since we cannot be certain that this data will be fetched immediately, we use an "Observable" which will ensure that the data will be delivered as soon as it is fetched
		getPost(): Observable {
			return this.http.get('https://jsonplaceholder.typicode.com/posts/1');
		}
		
		7.1 and we need to import the Observable from rxjs:
			import { Observable } from 'rxjs';
	8. we need to provide a place to store that object in, and because it doesn't know what format our data will be in, we will do a similar thing like class in java/c++:
		ng generate interface interfaces/user
	9. specify the empty abstract interface (ie. class) we've just created with it's components (ie. from the json we're fetching):
		export interface User {
    			userId: string;
    			id: string;
    			title: string;
    			body: string;
		}
	10. user the user interface created above and provide the template whenever we use the get method. Go back to user.service.ts and update:
		getPost(): Observable<User> {
   			return this.http.get<User>('https://jsonplaceholder.typicode.com/posts/1');
		}
	the second "<User>" is basically telling it to bring the data in the form of a "User", and the first "<User>" is telling it to return it in the form of a "User"

		10.1 and import:
			import { User } from '../interfaces/user';




lec11
======
to work with angular forms, you need to import FormsModule in apps.module.ts:
	import { FormsModule } from '@angular/forms' 
and also add formsmodule in the imports array below:
	imports: [
    		BrowserModule,
		AppRoutingModule,
		FormsModule
	],

Create a simple form (with 2 text inputs + 1 submit), and declare it as an "ngform":
	<form class="form" (ngSubmit)="onSubmit(myForm)" #myForm="ngForm">
		* the "myForm" that is passed in into the onSubmit function is coming from #myForm (which will be in the format of ngForm)
Similarly, in app.component.ts, create an onSubmit function as follows:
	onSubmit(myForm: NgForm) {
    		console.log(myForm);
  	}

However, the problem now is the 2 text inputs in the form is still in an HTML format. These need to be declared as "ngModel" to specify it is an angular model:
	<input type="text" class="form-control" id="formGroupExampleInput2" placeholder="Enter age" name="age" NgModel>
		* angular will access the NgModel components by their names, not by their IDs (thus, name is required)
		* you can see it inside the "controls" as the name you specified, when you see the console (developer tools on web) only when you have it as NgModel

To access the values that are inputted in the text inputs, you can access them as follows:
	onSubmit(myForm: NgForm) {
    		console.log(myForm.value.name);
  	}


some sample validators
-------------
- required			input is required
- pattern = "[a-zA-Z]*"		can only take alphabets
- minlength/maxlength
- type = "number"		can only take numbers
- min = "1"			mininum value is "1", if it's any lower, the form is "invalid"
- disabled			will make the element disabled
	* if you want to have it enabled on condition:
		[disabled]="!myForm.form.valid" where myForm comes from the name I tagged my form with "#myForm"

to show the invalid inputs (once it has been touched), put this in app.component.css:
	input.ng-invalid.ng-touched {
    		border: red 2px solid;
	}

Two-way binding
------------
inside app.component.ts file, create a string variable called name
	name: string="";
Then for the name input field, we'll make the ngModel pass the value of the textfield directly to the variable name from above
	[(ngModel)]="name"

to do an onchange event:
	(input)="whatever_name_of_function()"