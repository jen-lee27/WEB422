1. Testing in angular is very important especially when the app becomes complex. Lets start with a simple example of testing

	- Create a new folder Testing in app and add the following files with the code:
	
		- add.ts
		
			export function add(a: number, b: number)
			{
				return a + b;
			}
			
		- add.spec.ts
		
			import { add } from "./add";

			describe("add", ()=>{
				it("should return sum of both numbers", ()=>{
					const result = add(2, 2);

					expect(result).toBe(3);
				})
			}
			)
			
			- here describe is a suite which holds the test
			- it is the test
			
		- type ng test in the console and see the result of the result which would show an error since result be 4.
		
	- Make sure to remove everything from app.component.spec.ts and other app components


	- Lets now update the code in both the files to run multiple tests
	
		- add.ts
			
			export function add(a: number, b: number)
			{
				if (a < 0 || b < 0)
				{
					return 0;
				}
				return a + b;
			}
			
		- add.spec.ts
		
			import { add } from "./add";

			describe("add", ()=>{
				it("should return sum of both numbers", ()=>{
					const result = add(2, 2);
					expect(result).toBe(4);
				})
				it("both numbers should be positive", ()=>{
					const result = add(-2, -2);
					expect(result).toBe(0);
				})
			}
			)
			
2. Testing can be performed on Strings as well

	- Create new files with the following code below:
	
		- reverse.ts
		
			export function reverse(word: string)
			{
				return word.split('').reverse().join('');
			}
			
		- reverse.spec.ts
		
			import { reverse } from "./reverse"

			describe("reverse", ()=>{
				it("should reverse a string", ()=>{
					const result = reverse("Hello");
					expect(result).toEqual("olleH");
				})
			})
			
	
	- It is a good idea to test for edge cases as well. Update reverse.spec.ts as
	
		import { reverse } from './reverse';

		describe('reverse', () => {
		  it('should reverse a string', () => {
			const result = reverse('Hello');
			expect(result).toEqual('olleH');
		  });

		  it('should reverse an empty string', () => {
			const result = reverse('');
			expect(result).toEqual('');
		  });

		  it('should reverse a single-character string', () => {
			const result = reverse('A');
			expect(result).toEqual('A');
		  });
		});

3. Testing can be performed on arrays as well.

	- Create the following files with code:
	
		- arrays.ts
		
			export function getNumbers()
			{
				return [1, 3, 2];
			}
			
		- arrays.spec.ts
		
			import { getNumbers } from "./arrays"

			describe("getNumbers", ()=>{
				it("should contain numbers", ()=>{
					const result = getNumbers();
					expect(result).toContain(1);
					expect(result).toContain(2);
					expect(result).toContain(3);
					expect(result).toContain(4);
				});
			});
			
		- Above test will fail since it is looking for 4 which is not in the array.
		
4. Testing can be applied to Services

	- Create a new service using 'ng generate service services/counter' and add the following code to the files:
	
		- counter.service.ts
		
			import { Injectable } from '@angular/core';

			@Injectable({
			  providedIn: 'root'
			})
			export class CounterService {

			  counter: number = 0;

			  constructor() { }

			  increment()
			  {
				this.counter++;
			  }

			  decrement()
			  {
				this.counter--;
			  }
			}
			
		- counter.service.spec.ts
		
			import { TestBed } from '@angular/core/testing';

			import { CounterService } from './counter.service';

			describe('CounterService', () => {
			  it('should increment the value by 1', () => {
				const service = new CounterService();
				service.increment();

				expect(service.counter).toBe(1);
			  });
			  it('should decrement the value by 1', () => {
				const service = new CounterService();
				service.decrement();

				expect(service.counter).toBe(-1);
			  });
			});
			
		This would help in testing a service.
		
		- Since we are using the service object, why not to define it only once instead of defining it twice in both the tests:
		
			import { TestBed } from '@angular/core/testing';

			import { CounterService } from './counter.service';

			describe('CounterService', () => {
			  const service = new CounterService();
			  it('should increment the value by 1', () => {
				service.increment();

				expect(service.counter).toBe(1);
			  });
			  it('should decrement the value by 1', () => {
				service.decrement();

				expect(service.counter).toBe(-1);
			  });
			});
			
		However, the above code would make the second test fail because the value of counter would be 0 by then.
		
		- We can update the testing using the following beforeEach() method:
		
			import { CounterService } from './counter.service';

			describe('CounterService', () => {

			  let service: CounterService;

			  beforeEach(()=>{
				service = new CounterService();
			  });
			  
			  it('should increment the value by 1', () => {
				service.increment();

				expect(service.counter).toBe(1);
			  });
			  it('should decrement the value by 1', () => {
				service.decrement();

				expect(service.counter).toBe(-1);
			  });
			});


5. Testing can be applied to components as well

	- Create a new angular component using 'ng generate component components/user' and add the following code:
	
		- user.component.html
		
			<p class="userClass">User</p>
			
		- user.component.spec.ts (add this code as the last test)
		
			it('should contain user', () => {
				const data = fixture.nativeElement;
				const result = data.querySelector(".userClass").textContent;

				expect(result).toBe("Seneca");
			});
			
		This test would fail becuase test is expecting 'User' and got 'Seneca'


6. Deploying Angular app is a must step once you have finished developing your app. This week, we'll deploy our angular app to Firebase.

	- Lets quickly create a simple app based on our previous steps:
	
		- user.component.html
		
			<div class="card" style="width: 18rem;">
			<img src="https://picsum.photos/200" class="card-img-top" alt="Seneca">
			<div class="card-body">
			  <h5 class="card-title userClass">Seneca College</h5>
			  <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
			  <a href="#" class="btn btn-primary">Go somewhere</a>
			</div>
		  </div>
		  
		- user.component.spec.ts
		
			import { ComponentFixture, TestBed } from '@angular/core/testing';

			import { UserComponent } from './user.component';

			describe('UserComponent', () => {
			  let component: UserComponent;
			  let fixture: ComponentFixture<UserComponent>;

			  beforeEach(() => {
				TestBed.configureTestingModule({
				  declarations: [UserComponent],
				});
				fixture = TestBed.createComponent(UserComponent);
				component = fixture.componentInstance;
				fixture.detectChanges();
			  });

			  it('should create', () => {
				expect(component).toBeTruthy();
			  });

			  it('should contain user', () => {
				const data = fixture.nativeElement;
				const result = data.querySelector(".userClass").textContent;

				expect(result).toBe("Seneca College");
			  });
			});

		- app.component.html
		
			<div class="container-fluid my-3">
			  <app-user />
			</div>
			
	- Once app is created, sign up to make an account on Firebase (https://firebase.google.com/)
	
	- Once signed up follow the below step:
	
		- Go to https://firebase.google.com/ and click on 'Go to Console'
		
		- Click on Add Project and follow the instructions till the project is created.

	- Now go to VSCode and in the console install Firebase
	
		npm install -g firebase-tools
		
	- Now login to Firebase and authenticate
	
		firebase login
		
	- Initialize Firebase
	
		firebase init
		
	- Choose hosting from the options provided (with Github)
	
	- Choose existing project and select the one you created earlier
	
	- When asked about public directory, type following
	
		dist/myapp
		
	- If asked about index.html, press yes
	
	- Build the project using the following command
	
		ng build
		
	- Finally deploy
	
		firebase deploy
		
	- You should now have a live URL for the website which you can use for your wesite.

		